extends Camera3D

@export var max_tilt : float = 0.004 # How high the camera will tilt up
@export var max_tilt_pos : float = 0.012 # How much the camera will shift to the side
@onready var current_position : Vector3 = $".".position
@onready var current_tilt : Vector3 = $".".rotation

var time_elapsed: float = 0.0
@export_category("Breathing Settings")
@export var breath_timer : float = 5.0  # Duration of the entire breathing cycle
@export var max_breath : float = 0.008 # How strong the breath will go to

var breath_value: float = 0.0  # Variable to hold the breath value for visualization
var target_breath_value: float = 0.0  # Variable to hold the calculated breath target

func _process(delta):
	time_elapsed += delta
	camera_tilting(delta)
	
	target_breath_value = max_breath * 0.5 * (1.0 + sin(time_elapsed * PI * 2 / breath_timer))
	breath_value = lerp(breath_value, target_breath_value, 0.1)
	
	position.y = current_position.y + breath_value
	fov = lerp(65.0, 65.325, breath_value * 100)

func camera_tilting(delta : float) :
	var mouse_pos = get_viewport().get_mouse_position()
	var viewport_size = get_viewport().get_size()
	
	var normalized_x = (mouse_pos.x / viewport_size.x) * 2 - 1
	var normalized_y = -(mouse_pos.y / viewport_size.y) * 2 - 1
	
	var camera_tilt = Vector3(current_tilt.x + normalized_y * max_tilt, -current_tilt.y + normalized_x * max_tilt * 0.25, current_tilt.z)
	
	rotation = lerp(rotation, camera_tilt * lerp(1.0, randf_range(1.0, 0.95), delta * 0.8), 10 * delta)
	position.x = lerpf(position.x, current_position.x + normalized_x * max_tilt_pos, 3 * delta)
	position.z = lerpf(position.z, current_position.z + normalized_y * 0.001, 10 * delta)
